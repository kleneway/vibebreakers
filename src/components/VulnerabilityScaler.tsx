"use client";

import React from 'react';
import { Button } from './Button';
import { Heart, Smile, Zap } from 'lucide-react';

interface VulnerabilityScalerProps {
  currentRound: number;
  onLevelSelect: (level: 'low' | 'medium' | 'high') => void;
}

export const VulnerabilityScaler: React.FC<VulnerabilityScalerProps> = ({
  currentRound,
  onLevelSelect
}) => {
  const levels = [
    {
      key: 'low' as const,
      icon: <Smile className="w-8 h-8" />,
      title: 'Light & Playful',
      description: 'Surface-level sharing that breaks the ice',
      color: 'from-green-400 to-emerald-500',
      bgColor: 'bg-green-50 dark:bg-green-900/20',
      textColor: 'text-green-800 dark:text-green-200',
      examples: [
        'Embarrassing moments',
        'Childhood misconceptions', 
        'Silly fears',
        'Harmless white lies'
      ]
    },
    {
      key: 'medium' as const,
      icon: <Zap className="w-8 h-8" />,
      title: 'Personal & Meaningful',
      description: 'Stories that reveal your values and growth',
      color: 'from-yellow-400 to-orange-500',
      bgColor: 'bg-yellow-50 dark:bg-yellow-900/20',
      textColor: 'text-yellow-800 dark:text-yellow-200',
      examples: [
        'Moments of growth',
        'Friendship lessons',
        'Moral choices',
        'Disappointments'
      ]
    },
    {
      key: 'high' as const,
      icon: <Heart className="w-8 h-8" />,
      title: 'Deep & Vulnerable',
      description: 'Intimate sharing that builds profound connection',
      color: 'from-red-400 to-pink-500',
      bgColor: 'bg-red-50 dark:bg-red-900/20',
      textColor: 'text-red-800 dark:text-red-200',
      examples: [
        'Hidden fears',
        'Self-forgiveness',
        'Personal transformation',
        'Life wisdom'
      ]
    }
  ];

  const getRoundTitle = () => {
    switch (currentRound) {
      case 1: return 'Round 1: Getting Started';
      case 2: return 'Round 2: Going Deeper';
      case 3: return 'Round 3: Final Stories';
      default: return `Round ${currentRound}`;
    }
  };

  const getRecommendedLevel = () => {
    switch (currentRound) {
      case 1: return 'low';
      case 2: return 'medium';
      case 3: return 'high';
      default: return 'medium';
    }
  };

  return (
    <div className="bg-white dark:bg-neutral-800 rounded-lg p-6 shadow-lg">
      <div className="text-center mb-6">
        <h2 className="text-2xl font-bold mb-2">{getRoundTitle()}</h2>
        <p className="text-gray-600 dark:text-gray-300">
          Choose the vulnerability level for this round's stories
        </p>
      </div>

      <div className="space-y-4 max-w-4xl mx-auto">
        {levels.map((level) => {
          const isRecommended = level.key === getRecommendedLevel();
          
          return (
            <div
              key={level.key}
              className={`relative ${level.bgColor} rounded-lg p-6 border-2 ${
                isRecommended 
                  ? 'border-blue-300 dark:border-blue-600' 
                  : 'border-transparent'
              }`}
            >
              {isRecommended && (
                <div className="absolute -top-2 left-4 bg-blue-500 text-white px-2 py-1 rounded text-xs font-medium">
                  Recommended for Round {currentRound}
                </div>
              )}
              
              <div className="flex items-start gap-4">
                <div className={`bg-gradient-to-r ${level.color} text-white p-3 rounded-lg flex-shrink-0`}>
                  {level.icon}
                </div>
                
                <div className="flex-grow">
                  <h3 className={`text-xl font-semibold ${level.textColor} mb-2`}>
                    {level.title}
                  </h3>
                  <p className={`${level.textColor} mb-3 opacity-80`}>
                    {level.description}
                  </p>
                  
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-2 mb-4">
                    {level.examples.map((example, index) => (
                      <div key={index} className="bg-white dark:bg-neutral-700 rounded px-2 py-1 text-xs">
                        {example}
                      </div>
                    ))}
                  </div>
                  
                  <Button
                    onClick={() => onLevelSelect(level.key)}
                    variant={isRecommended ? 'primary' : 'secondary'}
                    size="sm"
                    className="w-full md:w-auto"
                  >
                    Choose {level.title}
                  </Button>
                </div>
              </div>
            </div>
          );
        })}
      </div>

      <div className="mt-6 bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4">
        <h4 className="font-medium text-blue-800 dark:text-blue-200 mb-2">
          How Vulnerability Levels Work
        </h4>
        <ul className="text-sm text-blue-600 dark:text-blue-300 space-y-1">
          <li>• <strong>Progressive depth:</strong> Most groups start light and go deeper each round</li>
          <li>• <strong>Comfort matters:</strong> Choose what feels right for your group dynamic</li>
          <li>• <strong>Equal challenge:</strong> Everyone gets the same prompt regardless of their role</li>
          <li>• <strong>Safety first:</strong> You can always opt for a lower level if needed</li>
        </ul>
      </div>
    </div>
  );
};